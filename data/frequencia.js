/**
 * Camada de dados para Frequ√™ncia Escolar
 * 
 * Fontes da verdade: Views e Materialized Views do Supabase Postgres
 * - v_frequencia_diaria_turma: estat√≠sticas di√°rias por turma (P, A, F, %)
 * - v_frequencia_acumulado_aluno: acumulado por aluno (P, A, F, %)
 * - mv_frequencia_mensal_aluno: resumo mensal por aluno (materializada)
 * - frequencia: tabela base para consultas espec√≠ficas
 * 
 * IMPORTANTE: Regra operacional - A (atestado) √© tratado como presen√ßa
 * % presen√ßa operacional = (P + A) / (P + A + F) * 100
 */

// Configura√ß√£o do Supabase (ser√° injetada pelo sistema principal)
let supabaseClient = null;

/**
 * Inicializa a conex√£o com o Supabase
 * @param {Object} client - Cliente do Supabase
 */
export function initSupabaseConnection(client) {
    supabaseClient = client;
    console.log('‚úÖ Camada de dados de frequ√™ncia inicializada');
}

/**
 * Obt√©m cliente do Supabase (aguarda se necess√°rio)
 * @returns {Promise<Object>} Cliente do Supabase
 */
async function getClient() {
    if (!supabaseClient) {
        // Aguardar client global estar dispon√≠vel
        if (typeof window !== 'undefined' && window.supabaseClient) {
            supabaseClient = window.supabaseClient;
        } else {
            await new Promise(resolve => {
                const check = setInterval(() => {
                    if (window?.supabaseClient) {
                        supabaseClient = window.supabaseClient;
                        clearInterval(check);
                        resolve();
                    }
                }, 100);
            });
        }
    }
    return supabaseClient;
}

/**
 * Lista todas as FALTAS (datas) de um aluno
 * @param {string} codigo_matricula - C√≥digo de matr√≠cula do aluno
 * @param {number} limit - Limite de registros (padr√£o: 100)
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function getFaltasAluno(codigo_matricula, limit = 100) {
    try {
        const client = await getClient();
        
        const { data, error } = await client
            .from('frequencia')
            .select('data, status, turma, nome_completo')
            .eq('codigo_matricula', codigo_matricula)
            .eq('status', 'F')
            .order('data', { ascending: false })
            .limit(limit);
        
        console.log(`üìÖ Faltas obtidas para aluno ${codigo_matricula}: ${data?.length || 0} registros`);
        
        return { data, error };
    } catch (error) {
        console.error(`‚ùå Erro ao obter faltas do aluno ${codigo_matricula}:`, error);
        return { data: null, error };
    }
}

/**
 * Resumo acumulado por aluno (P, A, F, %)
 * @param {string} codigo_matricula - C√≥digo de matr√≠cula do aluno
 * @returns {Promise<{data: Object|null, error: any}>}
 */
export async function getResumoAcumuladoAluno(codigo_matricula) {
    try {
        const client = await getClient();
        
        const { data, error } = await client
            .from('v_frequencia_acumulado_aluno')
            .select('*')
            .eq('codigo_matricula', codigo_matricula)
            .limit(1);
        
        const result = data?.[0] ?? null;
        
        console.log(`üìä Resumo acumulado obtido para aluno ${codigo_matricula}:`, 
                   result ? `${result.pct_presenca_operacional}%` : 'n√£o encontrado');
        
        return { data: result, error };
    } catch (error) {
        console.error(`‚ùå Erro ao obter resumo acumulado do aluno ${codigo_matricula}:`, error);
        return { data: null, error };
    }
}

/**
 * Resumo mensal de um aluno espec√≠fico
 * @param {string} codigo_matricula - C√≥digo de matr√≠cula do aluno
 * @param {string} mes - M√™s no formato 'YYYY-MM-DD' (dia sempre 01)
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function getResumoMensalAluno(codigo_matricula, mes = null) {
    try {
        const client = await getClient();
        
        let query = client
            .from('mv_frequencia_mensal_aluno')
            .select('*')
            .eq('codigo_matricula', codigo_matricula);
        
        if (mes) {
            query = query.eq('mes', mes);
        }
        
        query = query.order('mes', { ascending: false });
        
        const { data, error } = await query;
        
        console.log(`üìÖ Resumo mensal obtido para aluno ${codigo_matricula}: ${data?.length || 0} meses`);
        
        return { data, error };
    } catch (error) {
        console.error(`‚ùå Erro ao obter resumo mensal do aluno ${codigo_matricula}:`, error);
        return { data: null, error };
    }
}

/**
 * Resumo mensal do m√™s atual de um aluno
 * @param {string} codigo_matricula - C√≥digo de matr√≠cula do aluno
 * @returns {Promise<{data: Object|null, error: any}>}
 */
export async function getResumoMensalAtualAluno(codigo_matricula) {
    try {
        // Obter primeiro dia do m√™s atual
        const hoje = new Date();
        const primeiroDiaMes = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
        const mesAtual = primeiroDiaMes.toISOString().split('T')[0];
        
        const { data, error } = await getResumoMensalAluno(codigo_matricula, mesAtual);
        
        const result = data?.[0] ?? null;
        
        return { data: result, error };
    } catch (error) {
        console.error(`‚ùå Erro ao obter resumo mensal atual do aluno ${codigo_matricula}:`, error);
        return { data: null, error };
    }
}

/**
 * Comparativo de frequ√™ncia por turma no m√™s
 * @param {string} mes - M√™s no formato 'YYYY-MM-DD' (dia sempre 01)
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function getComparativoTurmas(mes = null) {
    try {
        const client = await getClient();
        
        // Se n√£o especificar m√™s, usar o atual
        if (!mes) {
            const hoje = new Date();
            const primeiroDiaMes = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
            mes = primeiroDiaMes.toISOString().split('T')[0];
        }
        
        const { data, error } = await client
            .from('mv_frequencia_mensal_aluno')
            .select('turma, codigo_matricula, pct_presenca_operacional, total_aulas, presencas, atestados, faltas')
            .eq('mes', mes)
            .order('turma');
        
        if (error) {
            return { data: null, error };
        }
        
        // Agrupar por turma e calcular m√©dias
        const turmaStats = {};
        
        data.forEach(registro => {
            const turma = registro.turma;
            
            if (!turmaStats[turma]) {
                turmaStats[turma] = {
                    turma,
                    totalAlunos: 0,
                    somaPresenca: 0,
                    totalAulas: 0,
                    totalPresencas: 0,
                    totalAtestados: 0,
                    totalFaltas: 0,
                    alunos: []
                };
            }
            
            turmaStats[turma].totalAlunos++;
            turmaStats[turma].somaPresenca += registro.pct_presenca_operacional || 0;
            turmaStats[turma].totalAulas += registro.total_aulas || 0;
            turmaStats[turma].totalPresencas += registro.presencas || 0;
            turmaStats[turma].totalAtestados += registro.atestados || 0;
            turmaStats[turma].totalFaltas += registro.faltas || 0;
            turmaStats[turma].alunos.push({
                codigo: registro.codigo_matricula,
                presenca: registro.pct_presenca_operacional
            });
        });
        
        // Calcular m√©dias e estat√≠sticas finais
        const resultado = Object.values(turmaStats).map(turma => ({
            turma: turma.turma,
            totalAlunos: turma.totalAlunos,
            mediaPresenca: turma.totalAlunos > 0 ? 
                (turma.somaPresenca / turma.totalAlunos).toFixed(2) : 0,
            totalAulas: turma.totalAulas,
            totalPresencas: turma.totalPresencas,
            totalAtestados: turma.totalAtestados,
            totalFaltas: turma.totalFaltas,
            percentualPresencaGeral: turma.totalAulas > 0 ? 
                (((turma.totalPresencas + turma.totalAtestados) / turma.totalAulas) * 100).toFixed(2) : 0
        }));
        
        console.log(`üìä Comparativo de turmas calculado para ${mes}: ${resultado.length} turmas`);
        
        return { data: resultado, error: null };
    } catch (error) {
        console.error(`‚ùå Erro ao obter comparativo de turmas:`, error);
        return { data: null, error };
    }
}

/**
 * Frequ√™ncia di√°ria de uma turma espec√≠fica
 * @param {string} turma - Nome da turma
 * @param {string} inicio - Data de in√≠cio (YYYY-MM-DD) - opcional
 * @param {string} fim - Data de fim (YYYY-MM-DD) - opcional
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function getFrequenciaDiariaTurma(turma, inicio = null, fim = null) {
    try {
        const client = await getClient();
        
        let query = client
            .from('v_frequencia_diaria_turma')
            .select('*')
            .eq('turma', turma)
            .order('data', { ascending: true });
        
        const { data, error } = await query;
        
        if (error) {
            return { data: null, error };
        }
        
        // Filtrar por intervalo de datas no frontend (mais flex√≠vel)
        let dataFiltrada = data;
        
        if (inicio) {
            dataFiltrada = dataFiltrada.filter(item => item.data >= inicio);
        }
        
        if (fim) {
            dataFiltrada = dataFiltrada.filter(item => item.data <= fim);
        }
        
        console.log(`üìÖ Frequ√™ncia di√°ria obtida para turma ${turma}: ${dataFiltrada.length} dias`);
        
        return { data: dataFiltrada, error: null };
    } catch (error) {
        console.error(`‚ùå Erro ao obter frequ√™ncia di√°ria da turma ${turma}:`, error);
        return { data: null, error };
    }
}

/**
 * Lista de turmas dispon√≠veis para filtros
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function getTurmasDisponiveisFrequencia() {
    try {
        const client = await getClient();
        
        const { data, error } = await client
            .from('v_frequencia_acumulado_aluno')
            .select('turma')
            .order('turma', { ascending: true });
        
        // Remover duplicatas
        const turmasUnicas = [...new Set(data?.map(item => item.turma) || [])];
        
        console.log(`üéØ Turmas dispon√≠veis (frequ√™ncia): ${turmasUnicas.length}`);
        
        return { data: turmasUnicas, error };
    } catch (error) {
        console.error('‚ùå Erro ao obter turmas dispon√≠veis:', error);
        return { data: [], error };
    }
}

/**
 * Estat√≠sticas gerais de frequ√™ncia
 * @param {string} turma - Filtrar por turma (opcional)
 * @returns {Promise<{data: Object, error: any}>}
 */
export async function getEstatisticasFrequencia(turma = null) {
    try {
        const client = await getClient();
        
        let query = client
            .from('v_frequencia_acumulado_aluno')
            .select('*');
        
        if (turma) {
            query = query.eq('turma', turma);
        }
        
        const { data, error } = await query;
        
        if (error) {
            return { data: null, error };
        }
        
        // Calcular estat√≠sticas
        const presencas = data.map(item => item.pct_presenca_operacional).filter(p => p !== null);
        const mediaPresenca = presencas.length > 0 ? 
            (presencas.reduce((a, b) => a + b, 0) / presencas.length).toFixed(2) : 0;
        
        // Distribui√ß√£o por faixas
        const excelentes = presencas.filter(p => p >= 95).length; // 95%+
        const bons = presencas.filter(p => p >= 85 && p < 95).length; // 85-94%
        const regulares = presencas.filter(p => p >= 75 && p < 85).length; // 75-84%
        const criticos = presencas.filter(p => p < 75).length; // <75%
        
        // Totais gerais
        const totalPresencas = data.reduce((sum, item) => sum + (item.presencas || 0), 0);
        const totalAtestados = data.reduce((sum, item) => sum + (item.atestados || 0), 0);
        const totalFaltas = data.reduce((sum, item) => sum + (item.faltas || 0), 0);
        const totalAulas = totalPresencas + totalAtestados + totalFaltas;
        
        const estatisticas = {
            totalAlunos: data.length,
            mediaPresenca: parseFloat(mediaPresenca),
            maiorPresenca: presencas.length > 0 ? Math.max(...presencas) : 0,
            menorPresenca: presencas.length > 0 ? Math.min(...presencas) : 0,
            distribuicao: {
                excelentes,
                bons,
                regulares,
                criticos
            },
            totaisGerais: {
                totalAulas,
                totalPresencas,
                totalAtestados,
                totalFaltas,
                percentualPresencaGeral: totalAulas > 0 ? 
                    (((totalPresencas + totalAtestados) / totalAulas) * 100).toFixed(2) : 0
            }
        };
        
        console.log(`üìä Estat√≠sticas de frequ√™ncia calculadas:`, estatisticas);
        
        return { data: estatisticas, error: null };
    } catch (error) {
        console.error('‚ùå Erro ao calcular estat√≠sticas de frequ√™ncia:', error);
        return { data: null, error };
    }
}

/**
 * Alunos com baixa frequ√™ncia (menos de 75%)
 * @param {string} turma - Filtrar por turma (opcional)
 * @param {number} limite - Limite de presen√ßa para considerar "baixa" (padr√£o: 75)
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function getAlunosComBaixaFrequencia(turma = null, limite = 75) {
    try {
        const client = await getClient();
        
        let query = client
            .from('v_frequencia_acumulado_aluno')
            .select('*')
            .lt('pct_presenca_operacional', limite)
            .order('pct_presenca_operacional', { ascending: true });
        
        if (turma) {
            query = query.eq('turma', turma);
        }
        
        const { data, error } = await query;
        
        console.log(`‚ö†Ô∏è Alunos com baixa frequ√™ncia (<${limite}%): ${data?.length || 0}`);
        
        return { data, error };
    } catch (error) {
        console.error('‚ùå Erro ao obter alunos com baixa frequ√™ncia:', error);
        return { data: null, error };
    }
}

/**
 * Refresh da Materialized View mensal (requer permiss√µes administrativas)
 * @returns {Promise<{success: boolean, error: any}>}
 */
export async function refreshMaterializedView() {
    try {
        const client = await getClient();
        
        // Executar refresh da MV
        const { data, error } = await client
            .rpc('refresh_mv_frequencia_mensal');
        
        if (error) {
            console.error('‚ùå Erro ao fazer refresh da MV:', error);
            return { success: false, error };
        }
        
        console.log('‚úÖ Materialized View refreshed com sucesso');
        return { success: true, error: null };
    } catch (error) {
        console.error('‚ùå Erro no refresh da MV:', error);
        return { success: false, error };
    }
}

/**
 * Fun√ß√£o de debug para desenvolvedores - frequ√™ncia
 * Lista os primeiros 10 registros do resumo mensal atual
 */
export async function debugFreq() {
    console.log('üîç DEBUG: Consultando resumo mensal atual (primeiros 10)...');
    
    try {
        const hoje = new Date();
        const primeiroDiaMes = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
        const mesAtual = primeiroDiaMes.toISOString().split('T')[0];
        
        const client = await getClient();
        
        const { data, error } = await client
            .from('mv_frequencia_mensal_aluno')
            .select('*')
            .eq('mes', mesAtual)
            .order('pct_presenca_operacional', { ascending: true })
            .limit(10);
        
        if (error) {
            console.error('‚ùå Erro no debug:', error);
            return;
        }
        
        console.log(`üìä M√™s atual (${mesAtual}): ${data?.length || 0} registros`);
        console.table(data);
        
        // Estat√≠sticas r√°pidas
        if (data && data.length > 0) {
            const presencas = data.map(d => d.pct_presenca_operacional);
            const media = (presencas.reduce((a, b) => a + b, 0) / presencas.length).toFixed(2);
            console.log(`üìà M√©dia de presen√ßa nesta amostra: ${media}%`);
        }
        
        return { data, mesAtual };
    } catch (error) {
        console.error('‚ùå Erro no debug de frequ√™ncia:', error);
        return null;
    }
}

/**
 * Utilit√°rios para formata√ß√£o de frequ√™ncia
 */
export const FrequenciaUtils = {
    /**
     * Formata percentual de presen√ßa
     * @param {number} percentual - Percentual num√©rico
     * @returns {string} Percentual formatado
     */
    formatarPercentual(percentual) {
        if (typeof percentual !== 'number') return 'N/A';
        return percentual.toFixed(1) + '%';
    },
    
    /**
     * Retorna cor da badge baseada no percentual de presen√ßa
     * @param {number} percentual - Percentual de presen√ßa
     * @returns {string} Classe CSS para a cor
     */
    getCorPresenca(percentual) {
        if (typeof percentual !== 'number') return 'badge-secondary';
        if (percentual >= 95) return 'badge-success';
        if (percentual >= 85) return 'badge-primary';
        if (percentual >= 75) return 'badge-warning';
        return 'badge-danger';
    },
    
    /**
     * Retorna descri√ß√£o da situa√ß√£o de frequ√™ncia
     * @param {number} percentual - Percentual de presen√ßa
     * @returns {string} Descri√ß√£o da situa√ß√£o
     */
    getDescricaoPresenca(percentual) {
        if (typeof percentual !== 'number') return 'Indefinida';
        if (percentual >= 95) return 'Excelente';
        if (percentual >= 85) return 'Boa';
        if (percentual >= 75) return 'Regular';
        if (percentual >= 50) return 'Baixa';
        return 'Cr√≠tica';
    },
    
    /**
     * Formata data para exibi√ß√£o brasileira
     * @param {string} data - Data no formato ISO
     * @returns {string} Data formatada
     */
    formatarData(data) {
        if (!data) return 'N/A';
        try {
            return new Date(data).toLocaleDateString('pt-BR');
        } catch {
            return data;
        }
    },
    
    /**
     * Formata m√™s/ano para exibi√ß√£o
     * @param {string} mes - M√™s no formato YYYY-MM-DD
     * @returns {string} M√™s formatado
     */
    formatarMesAno(mes) {
        if (!mes) return 'N/A';
        try {
            const data = new Date(mes);
            return data.toLocaleDateString('pt-BR', { 
                year: 'numeric', 
                month: 'long' 
            });
        } catch {
            return mes;
        }
    }
};

/**
 * Lista frequ√™ncia acumulada por aluno (compatibilidade com legado)
 * @param {Object} options - Op√ß√µes de filtro
 * @param {string} options.turma - Filtrar por turma
 * @param {number} options.limit - Limite de registros (padr√£o: 1000)
 * @param {number} options.offset - Offset para pagina√ß√£o (padr√£o: 0)
 * @returns {Promise<{data: Array, error: any, count: number}>}
 */
export async function listFrequenciaAcumulada({ turma = null, limit = 1000, offset = 0 } = {}) {
    try {
        const client = await getClient();
        
        let query = client
            .from('v_frequencia_acumulado_aluno')
            .select('*', { count: 'exact' });
        
        if (turma) {
            query = query.eq('turma', turma);
        }
        
        query = query
            .order('turma', { ascending: true })
            .order('nome_completo', { ascending: true })
            .range(offset, offset + limit - 1);
        
        const { data, error, count } = await query;
        
        console.log(`üìä Frequ√™ncia acumulada consultada: ${data?.length || 0} de ${count || 0} total`);
        
        return { data, error, count };
    } catch (error) {
        console.error('‚ùå Erro ao listar frequ√™ncia acumulada:', error);
        return { data: null, error, count: 0 };
    }
}

/**
 * Lista datas de faltas de um aluno espec√≠fico
 * @param {string} codigo_matricula - C√≥digo do aluno
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function listFaltasDoAluno(codigo_matricula) {
    try {
        const client = await getClient();
        
        const { data, error } = await client
            .from('frequencia')
            .select('data, status')
            .eq('codigo_matricula', codigo_matricula)
            .eq('status', 'F')
            .order('data', { ascending: false });
        
        console.log(`üìÖ Faltas consultadas para ${codigo_matricula}: ${data?.length || 0} registros`);
        
        return { data, error };
    } catch (error) {
        console.error(`‚ùå Erro ao listar faltas do aluno ${codigo_matricula}:`, error);
        return { data: null, error };
    }
}

/**
 * Lista resumo mensal da turma
 * @param {Object} options - Op√ß√µes de filtro
 * @param {string} options.turma - Turma espec√≠fica
 * @param {string} options.mes - M√™s no formato 'YYYY-MM-01'
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function listMensalDaTurma({ turma = null, mes = null } = {}) {
    try {
        const client = await getClient();
        
        let query = client.from('mv_frequencia_mensal_aluno').select('*');
        
        if (turma) {
            query = query.eq('turma', turma);
        }
        
        if (mes) {
            query = query.eq('mes', mes); // formato 'YYYY-MM-01'
        }
        
        const { data, error } = await query
            .order('pct_presenca_operacional', { ascending: false });
        
        console.log(`üìä Resumo mensal consultado: ${data?.length || 0} registros`);
        
        return { data, error };
    } catch (error) {
        console.error('‚ùå Erro ao listar resumo mensal:', error);
        return { data: null, error };
    }
}

/**
 * Lista comparativo de frequ√™ncia por turma no m√™s
 * @param {string} mes - M√™s no formato 'YYYY-MM-01'
 * @returns {Promise<{data: Array, error: any}>}
 */
export async function listComparativoTurmas(mes) {
    try {
        const client = await getClient();
        
        // Como o Supabase n√£o suporta GROUP BY direto no JS client,
        // vamos buscar todos os dados e agregar no cliente
        const { data, error } = await client
            .from('mv_frequencia_mensal_aluno')
            .select('turma, pct_presenca_operacional')
            .eq('mes', mes);
        
        if (error) {
            return { data: null, error };
        }
        
        // Agregar por turma no cliente
        const turmasMap = new Map();
        
        (data || []).forEach(row => {
            const turma = row.turma;
            if (!turmasMap.has(turma)) {
                turmasMap.set(turma, {
                    turma,
                    totalAlunos: 0,
                    somaPresenca: 0
                });
            }
            const stats = turmasMap.get(turma);
            stats.totalAlunos++;
            stats.somaPresenca += (row.pct_presenca_operacional || 0);
        });
        
        // Calcular m√©dias
        const resultado = Array.from(turmasMap.values()).map(stats => ({
            turma: stats.turma,
            totalAlunos: stats.totalAlunos,
            media_presenca: stats.totalAlunos > 0 ? 
                stats.somaPresenca / stats.totalAlunos : 0
        })).sort((a, b) => a.turma.localeCompare(b.turma));
        
        console.log(`üìä Comparativo de turmas para ${mes}: ${resultado.length} turmas`);
        
        return { data: resultado, error: null };
    } catch (error) {
        console.error('‚ùå Erro ao listar comparativo de turmas:', error);
        return { data: null, error };
    }
}

// Exportar fun√ß√£o debug globalmente para console (apenas em desenvolvimento)
if (typeof window !== 'undefined') {
    window.debugFreq = debugFreq;
    window.getResumoAcumuladoAluno = getResumoAcumuladoAluno;
    window.getFaltasAluno = getFaltasAluno;
    window.getResumoMensalAtualAluno = getResumoMensalAtualAluno;
    window.getResumoMensalAluno = getResumoMensalAluno;
    window.getEstatisticasFrequencia = getEstatisticasFrequencia;
    window.FrequenciaUtils = FrequenciaUtils;
    
    // Adicionar novas fun√ß√µes para compatibilidade
    window.listFrequenciaAcumulada = listFrequenciaAcumulada;
    window.listFaltasDoAluno = listFaltasDoAluno;
    window.listMensalDaTurma = listMensalDaTurma;
    window.listComparativoTurmas = listComparativoTurmas;
}

console.log('‚úÖ Camada de dados de frequ√™ncia carregada');