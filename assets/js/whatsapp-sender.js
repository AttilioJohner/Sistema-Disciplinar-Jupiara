// üì± Sistema de Envio WhatsApp para EECM Jupiara
// Integra√ß√£o com Railway WAHA para notificar pais

class WhatsAppSender {
  constructor() {
    this.apiUrl = 'https://waha-production-7ba4.up.railway.app/api';
    this.session = 'default';
  }

  // Enviar mensagem simples
  async enviarMensagem(telefone, mensagem) {
    try {
      console.log(`üì§ Enviando mensagem para ${telefone}`);

      // Formatar n√∫mero (adicionar @c.us se necess√°rio)
      const chatId = telefone.includes('@') ? telefone : `${telefone}@c.us`;

      const payload = {
        chatId: chatId,
        text: mensagem,
        session: this.session
      };

      const response = await fetch(`${this.apiUrl}/sendText`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Mensagem enviada com sucesso:', result);
        return { success: true, data: result };
      } else {
        const error = await response.text();
        console.error('‚ùå Erro ao enviar mensagem:', error);
        return { success: false, error: error };
      }

    } catch (error) {
      console.error('‚ùå Erro na requisi√ß√£o:', error);
      return { success: false, error: error.message };
    }
  }

  // Aguardar inicializa√ß√£o do banco de dados
  async aguardarInicializacaoDB(timeout = 5000) {
    return new Promise((resolve) => {
      const startTime = Date.now();

      const checkDB = () => {
        if (window.db) {
          console.log('‚úÖ window.db inicializado com sucesso');
          resolve(true);
          return;
        }

        if (Date.now() - startTime >= timeout) {
          console.error(`‚ùå Timeout aguardando window.db (${timeout}ms)`);
          resolve(false);
          return;
        }

        setTimeout(checkDB, 100);
      };

      checkDB();
    });
  }

  // Normalizar n√∫mero de telefone (remover 5¬∫ d√≠gito se presente)
  normalizarTelefone(telefone) {
    if (!telefone) return null;

    // Remover espa√ßos, par√™nteses, tra√ßos
    const numeroLimpo = telefone.replace(/[\s\(\)\-]/g, '');

    // Verificar se tem 13 d√≠gitos (com o 9 extra)
    // Formato: 5566999138335 (13 d√≠gitos)
    // Resultado: 556699138335 (12 d√≠gitos)
    if (numeroLimpo.length === 13 && numeroLimpo.startsWith('55')) {
      // Extrair: 55 + 66 + remover 9 + 99138335
      const codigoPais = numeroLimpo.substring(0, 2);    // "55"
      const codigoUF = numeroLimpo.substring(2, 4);      // "66"
      const numeroReal = numeroLimpo.substring(5);       // "99138335" (remove o 5¬∫ d√≠gito)

      const numeroNormalizado = codigoPais + codigoUF + numeroReal;
      console.log(`üìû Telefone normalizado: ${numeroLimpo} ‚Üí ${numeroNormalizado}`);
      return numeroNormalizado;
    }

    // Se j√° est√° no formato correto (12 d√≠gitos), retornar como est√°
    if (numeroLimpo.length === 12 && numeroLimpo.startsWith('55')) {
      console.log(`üìû Telefone j√° no formato correto: ${numeroLimpo}`);
      return numeroLimpo;
    }

    // Formato n√£o reconhecido
    console.warn(`‚ö†Ô∏è Formato de telefone n√£o reconhecido: ${telefone}`);
    return numeroLimpo;
  }

  // Buscar telefone do respons√°vel no banco de dados
  async buscarTelefoneResponsavel(alunoId) {
    try {
      console.log(`üîç Buscando telefone para aluno ID: ${alunoId}`);

      // Verificar se window.db est√° inicializado
      if (!window.db) {
        console.error('‚ùå window.db n√£o est√° inicializado');
        console.log('üîÑ Tentando aguardar inicializa√ß√£o...');

        // Aguardar at√© 5 segundos pela inicializa√ß√£o
        await this.aguardarInicializacaoDB(5000);

        if (!window.db) {
          throw new Error('Sistema de banco de dados n√£o inicializado ap√≥s aguardar. Recarregue a p√°gina.');
        }
      }

      // Buscar dados do aluno no banco
      const alunoDoc = await window.db.collection('alunos').doc(alunoId).get();

      if (!alunoDoc.exists) {
        console.warn(`‚ö†Ô∏è Aluno n√£o encontrado: ${alunoId}`);
        return null;
      }

      const dadosAluno = alunoDoc.data();
      console.log(`üìã Dados do aluno encontrados:`, {
        id: alunoId,
        nome: dadosAluno.nome || dadosAluno.nome_completo,
        responsavel1: dadosAluno.responsavel1,
        telefone_responsavel: dadosAluno.telefone_responsavel,
        telefone1: dadosAluno.telefone1,
        telefone: dadosAluno.telefone,
        // Log todos os campos para debug
        camposDisponiveis: Object.keys(dadosAluno)
      });

      // Tentar diferentes campos de telefone
      const telefoneResponsavel = dadosAluno.responsavel1 ||
                                 dadosAluno.telefone_responsavel ||
                                 dadosAluno.telefone1 ||
                                 dadosAluno.telefone;

      if (telefoneResponsavel) {
        console.log(`üìû Telefone bruto encontrado no campo: ${telefoneResponsavel}`);
        const telefoneNormalizado = this.normalizarTelefone(telefoneResponsavel);
        console.log(`üì≤ Telefone final normalizado: ${telefoneNormalizado}`);
        return telefoneNormalizado;
      }

      console.warn(`‚ö†Ô∏è Nenhum telefone encontrado para o aluno: ${dadosAluno.nome_completo || dadosAluno.nome || alunoId}`);
      return null;

    } catch (error) {
      console.error(`‚ùå Erro ao buscar telefone do aluno ${alunoId}:`, error);
      return null;
    }
  }

  // Enviar notifica√ß√£o de medida disciplinar (nova vers√£o)
  async notificarMedidaDisciplinar(dadosAluno, medida) {
    // Buscar telefone real do respons√°vel
    const telefone = await this.buscarTelefoneResponsavel(dadosAluno.id || dadosAluno.codigo);

    if (!telefone) {
      console.warn('‚ö†Ô∏è Aluno sem telefone cadastrado:', dadosAluno.nome);
      return { success: false, error: 'Telefone n√£o cadastrado para este aluno' };
    }

    console.log(`üì± Enviando WhatsApp para: ${telefone}`);
    const mensagem = this.formatarMensagemMedidaDisciplinar(dadosAluno, medida);
    return await this.enviarMensagem(telefone, mensagem);
  }

  // Enviar notifica√ß√£o de ocorr√™ncia disciplinar (mantido para compatibilidade)
  async notificarOcorrencia(dadosAluno, ocorrencia) {
    return await this.notificarMedidaDisciplinar(dadosAluno, ocorrencia);
  }

  // Formatar mensagem de medida disciplinar (novo template)
  formatarMensagemMedidaDisciplinar(aluno, medida) {
    const data = medida.data || new Date().toLocaleDateString('pt-BR');
    const isPositiva = this.isMedidaPositiva(medida.tipo);

    let mensagem = `Bom dia!\n`;
    mensagem += `Prezados Pais e/ou Respons√°veis, a Equipe de Gest√£o C√≠vico-Militar da EECM Jupiara informa:\n\n`;

    mensagem += `üë§ Aluno: ${aluno.nome}\n`;
    mensagem += `üÜî C√≥digo: ${aluno.id}\n`;
    mensagem += `üè´ Turma: ${aluno.turma}\n`;
    mensagem += `üìÖ Data da Ocorr√™ncia: ${data}\n\n`;

    mensagem += `üìë Tipo de Medida: ${medida.tipo}\n`;

    if (medida.especificacao) {
      mensagem += `üìñ Especifica√ß√£o (Conforme Regulamento Disciplinar): ${medida.especificacao}\n`;
    }

    if (medida.motivo) {
      mensagem += `üìù Motivo/Descri√ß√£o: ${medida.motivo}\n`;
    }

    if (medida.providencias) {
      mensagem += `‚öñ Provid√™ncias: ${medida.providencias}\n`;
    }

    mensagem += `\n`;

    // Adicionar texto baseado no tipo (positiva/negativa)
    if (isPositiva) {
      mensagem += `‚úÖ Parabenizamos o aluno pelo destaque! Sua postura e atitude merecem reconhecimento e servem de exemplo para toda a turma.\n\n`;
    } else {
      mensagem += `‚ö†Ô∏è Registramos uma chamada de aten√ß√£o, pois a a√ß√£o √© incompat√≠vel com as normas e valores da EECM Jupiara.\n\n`;

      // Adicionar nota sobre documentos para medidas espec√≠ficas
      const medidaComDocumento = ['advert√™ncia', 'suspens√£o', 'termo de adequa√ß√£o'].some(tipo =>
        medida.tipo.toLowerCase().includes(tipo)
      );

      if (medidaComDocumento) {
        mensagem += `üìå Em caso de Advert√™ncia, Suspens√£o ou Termo de Adequa√ß√£o de Conduta, os respons√°veis possuem at√© 3 dias √∫teis para devolu√ß√£o do documento devidamente assinado.\n\n`;
      }
    }

    mensagem += `üì≤ Essa √© uma mensagem autom√°tica. Em caso de d√∫vidas, entre em contato com a Gest√£o C√≠vico-Militar pelo telefone ou WhatsApp: (66) 8101-0652.`;

    return mensagem;
  }

  // Verificar se medida √© positiva
  isMedidaPositiva(tipo) {
    const tiposPositivos = ['elogio', 'parab√©ns', 'destaque', 'reconhecimento', 'm√©rito'];
    return tiposPositivos.some(tipoPos => tipo.toLowerCase().includes(tipoPos));
  }

  // Formatar mensagem de ocorr√™ncia (mantido para compatibilidade)
  formatarMensagemOcorrencia(aluno, ocorrencia) {
    return this.formatarMensagemMedidaDisciplinar(aluno, ocorrencia);
  }

  // Enviar aviso de frequ√™ncia
  async notificarFrequencia(dadosAluno, faltas) {
    const telefone = dadosAluno.telefone1 || dadosAluno.telefone2;

    if (!telefone) {
      return { success: false, error: 'Telefone n√£o cadastrado' };
    }

    const mensagem = this.formatarMensagemFrequencia(dadosAluno, faltas);
    return await this.enviarMensagem(telefone, mensagem);
  }

  // Formatar mensagem de frequ√™ncia
  formatarMensagemFrequencia(aluno, faltas) {
    const data = new Date().toLocaleDateString('pt-BR');

    let mensagem = `üè´ *EECM Jupiara - Aviso de Frequ√™ncia*\n\n`;
    mensagem += `üë§ *Aluno:* ${aluno.nome}\n`;
    mensagem += `üè´ *Turma:* ${aluno.turma}\n`;
    mensagem += `üìÖ *Data:* ${data}\n\n`;

    mensagem += `‚ö†Ô∏è *Faltas Acumuladas:* ${faltas} dias\n\n`;

    if (faltas >= 15) {
      mensagem += `üö® *ATEN√á√ÉO:* N√∫mero de faltas pr√≥ximo ao limite legal.\n`;
      mensagem += `√â necess√°rio comparecer √† escola para regularizar.\n\n`;
    } else if (faltas >= 10) {
      mensagem += `‚ö†Ô∏è *AVISO:* N√∫mero elevado de faltas.\n`;
      mensagem += `Solicitamos maior aten√ß√£o √† frequ√™ncia.\n\n`;
    }

    mensagem += `üìû *Contato da Escola:*\n`;
    mensagem += `WhatsApp: (66) 8101-0652\n`;
    mensagem += `Email: eecmjupiara@gmail.com\n\n`;
    mensagem += `_Mensagem autom√°tica do Sistema Disciplinar_`;

    return mensagem;
  }

  // Enviar mensagem personalizada
  async enviarMensagemPersonalizada(telefone, titulo, conteudo) {
    const data = new Date().toLocaleDateString('pt-BR');

    let mensagem = `üè´ *EECM Jupiara - ${titulo}*\n\n`;
    mensagem += `üìÖ *Data:* ${data}\n\n`;
    mensagem += `${conteudo}\n\n`;
    mensagem += `üìû *Contato da Escola:*\n`;
    mensagem += `WhatsApp: (66) 8101-0652\n`;
    mensagem += `Email: eecmjupiara@gmail.com\n\n`;
    mensagem += `_Mensagem autom√°tica do Sistema Disciplinar_`;

    return await this.enviarMensagem(telefone, mensagem);
  }

  // Testar conex√£o
  async testarConexao() {
    try {
      const response = await fetch(`${this.apiUrl}/sessions`);
      const sessions = await response.json();

      const sessionAtiva = sessions.find(s => s.name === this.session && s.status === 'WORKING');

      return {
        conectado: !!sessionAtiva,
        status: sessionAtiva ? sessionAtiva.status : 'DISCONNECTED',
        sessions: sessions
      };
    } catch (error) {
      return {
        conectado: false,
        status: 'ERROR',
        error: error.message
      };
    }
  }
}

// Inst√¢ncia global
window.whatsappSender = new WhatsAppSender();

// Fun√ß√µes de conveni√™ncia para usar no sistema
window.enviarNotificacaoWhatsApp = async function(dadosAluno, medida) {
  return await window.whatsappSender.notificarMedidaDisciplinar(dadosAluno, medida);
};

window.enviarMedidaDisciplinar = async function(dadosAluno, medida) {
  return await window.whatsappSender.notificarMedidaDisciplinar(dadosAluno, medida);
};

window.enviarAvisoFrequencia = async function(dadosAluno, faltas) {
  return await window.whatsappSender.notificarFrequencia(dadosAluno, faltas);
};

window.testarWhatsApp = async function() {
  return await window.whatsappSender.testarConexao();
};

// Fun√ß√£o de teste para medidas disciplinares
window.testarMedidaDisciplinar = async function(tipoTeste = 'negativa') {
  const alunoTeste = {
    id: '2025001', // Usar ID real de um aluno no banco
    codigo: '2025001',
    nome: 'Jo√£o Silva Santos',
    turma: '8A'
  };

  let medidaTeste;

  if (tipoTeste === 'positiva') {
    medidaTeste = {
      tipo: 'Elogio por Destaque Acad√™mico',
      especificacao: 'Reconhecimento por excelente desempenho em atividades escolares',
      motivo: 'Participa√ß√£o exemplar nas aulas e aux√≠lio aos colegas',
      providencias: 'Comunica√ß√£o aos respons√°veis e registro no hist√≥rico escolar',
      data: new Date().toLocaleDateString('pt-BR')
    };
  } else {
    medidaTeste = {
      tipo: 'Advert√™ncia',
      especificacao: 'Conforme Art. 15 do Regulamento Disciplinar - Comportamento inadequado',
      motivo: 'Conversas paralelas durante aula e desrespeito √†s orienta√ß√µes do professor',
      providencias: 'Orienta√ß√£o pedag√≥gica e comunica√ß√£o aos respons√°veis',
      data: new Date().toLocaleDateString('pt-BR')
    };
  }

  console.log(`üß™ Testando medida ${tipoTeste}:`, medidaTeste);
  return await window.enviarMedidaDisciplinar(alunoTeste, medidaTeste);
};

// Fun√ß√£o para testar normaliza√ß√£o de telefones
window.testarNormalizacaoTelefone = function() {
  const exemplos = [
    '5566999138335',    // Formato com 5¬∫ d√≠gito extra
    '556699138335',     // Formato correto
    '55 66 9 99138335', // Com espa√ßos
    '(55) 66 9 9913-8335', // Formatado
    '66999138335',      // Sem c√≥digo do pa√≠s
    '99138335'          // Apenas n√∫mero local
  ];

  console.log('üß™ Testando normaliza√ß√£o de telefones:');
  exemplos.forEach(tel => {
    const normalizado = window.whatsappSender.normalizarTelefone(tel);
    console.log(`üìû ${tel} ‚Üí ${normalizado}`);
  });
};

console.log('üì± WhatsApp Sender carregado - use: window.whatsappSender');
console.log('üß™ Para testar medidas: await testarMedidaDisciplinar("positiva") ou await testarMedidaDisciplinar("negativa")');
console.log('üìû Para testar telefones: testarNormalizacaoTelefone()');