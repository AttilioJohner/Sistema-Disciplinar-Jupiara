// Netlify Function: Assistente IA para Medidas Disciplinares
// Usa Google Gemini API para corrigir textos e sugerir artigos do regulamento

// Fetch √© nativo no Node 18+ (usado pelo Netlify)

// Configura√ß√£o da API Gemini
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
// Modelo verificado: gemini-2.5-flash (dispon√≠vel para esta API Key)
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';

// Contexto dos regulamentos EECM-MT (ser√° expandido com parsing dos PDFs)
const CONTEXTO_REGULAMENTO = `
Voc√™ √© um assistente especializado em regulamentos disciplinares de Escolas Estaduais C√≠vico-Militares (EECM) do Estado de Mato Grosso.

REFER√äNCIAS PRINCIPAIS:
- Regulamento Disciplinar das EECM-MT
- Manual de Conduta EECM
- Diretrizes Estaduais e Nacionais

ARTIGOS PRINCIPAIS:

Art. 6¬∫ ‚Äì O estudante deve pautar sua conduta pelo respeito m√∫tuo, disciplina e cumprimento das normas institucionais.

Art. 7¬∫, inciso II ‚Äì √â dever do aluno cumprir as normas disciplinares da unidade escolar.

Art. 9¬∫ ‚Äì As faltas disciplinares de natureza m√©dia s√£o as relacionadas √† a√ß√£o ou omiss√£o do aluno que interferem na ordem interna, rotina escolar, conviv√™ncia coletiva, deveres e obriga√ß√µes ou √† pr√°tica de reiteradas faltas disciplinares classificadas como de natureza leve.

Art. 14¬∫ ‚Äì A advert√™ncia oral √© a medida disciplinar branda, que consiste em advertir o aluno sobre fato praticado contr√°rio √† disciplina.
¬ß 1¬∫ A advert√™ncia ser√° aplicada no cometimento de faltas disciplinares de natureza leve.

Art. 15¬∫ ‚Äì A advert√™ncia escrita √© aplic√°vel aos casos de cometimento de faltas disciplinares de natureza m√©dia ou pela reincid√™ncia de faltas de natureza leve.

Art. 34¬∫ ‚Äì S√£o Circunst√¢ncias atenuantes:
- inciso I ‚Äì Ser aluno novato at√© 03 (tr√™s) meses, a contar da data de ingresso na EECM;

ANEXO I - FALTAS DISCIPLINARES (exemplos):
- Item 16: Fazer ou provocar excessivo barulho em qualquer depend√™ncia da EECM, durante o hor√°rio de aula.
- Item 18: Perturbar o estudo do(s) colega(s), com ru√≠dos ou brincadeiras.
- Item 56: Ser retirado, por mau comportamento, de sala de aula ou qualquer ambiente em que esteja sendo realizada atividade.
- Item 84: Promover, incitar ou envolver-se em rixa, inclusive luta corporal, dentro ou fora da EECM, estando ou n√£o uniformizado.

LINGUAGEM ESPERADA:
- Formal, t√©cnica, educacional
- Impessoal e objetiva
- Baseada em fatos observ√°veis
- Refer√™ncia aos valores: respeito, disciplina, hierarquia
`;

// Handler principal
exports.handler = async (event, context) => {
  // Headers CORS
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // Responder OPTIONS (preflight)
  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  // Apenas aceitar POST
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'M√©todo n√£o permitido. Use POST.' })
    };
  }

  try {
    // Verificar API Key
    if (!GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY n√£o configurada nas environment variables');
    }

    // Parse do body
    const { fato, faltasSelecionadas, tipoDocumento, aluno, data } = JSON.parse(event.body);

    if (!fato || !fato.trim()) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Campo "fato" √© obrigat√≥rio' })
      };
    }

    console.log('üìù Processando fato:', fato.substring(0, 100) + '...');
    console.log('üìã Faltas selecionadas:', faltasSelecionadas);

    // Construir prompt para o Gemini
    const prompt = construirPrompt({
      fato,
      faltasSelecionadas: faltasSelecionadas || [],
      tipoDocumento: tipoDocumento || 'FMD',
      aluno,
      data
    });

    // Chamar Gemini API
    const geminiResponse = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 4096,
        }
      })
    });

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text();
      console.error('‚ùå Erro na API Gemini:', errorText);
      throw new Error(`Gemini API error: ${geminiResponse.status} - ${errorText}`);
    }

    const geminiData = await geminiResponse.json();

    // Extrair texto da resposta
    const textoGerado = geminiData?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!textoGerado) {
      throw new Error('Resposta vazia da API Gemini');
    }

    console.log('‚úÖ Texto gerado com sucesso');

    // Parsear resposta JSON do Gemini
    const resultado = parseResposta(textoGerado);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        data: resultado,
        metadata: {
          processedAt: new Date().toISOString(),
          model: 'gemini-2.5-flash'
        }
      })
    };

  } catch (error) {
    console.error('‚ùå Erro no handler:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        success: false,
        error: error.message,
        fallback: true // Indica que o frontend deve permitir edi√ß√£o manual
      })
    };
  }
};

// Construir prompt estruturado
function construirPrompt({ fato, faltasSelecionadas, tipoDocumento, aluno, data }) {
  const faltasTexto = faltasSelecionadas.length > 0
    ? faltasSelecionadas.join(', ')
    : 'n√£o especificadas';

  return `${CONTEXTO_REGULAMENTO}

TAREFA:
Voc√™ deve analisar o fato disciplinar descrito abaixo e:
1. Corrigir gram√°tica e ortografia
2. Formalizar a linguagem (adequada para documento oficial escolar)
3. Estruturar o texto de forma clara e objetiva
4. Sugerir artigos aplic√°veis do regulamento
5. Gerar o texto da se√ß√£o "FUNDAMENTO" com base nos artigos

INFORMA√á√ïES DO CASO:
- Aluno: ${aluno || 'n√£o informado'}
- Data: ${data || 'n√£o informada'}
- Tipo de documento: ${tipoDocumento}
- Faltas selecionadas: ${faltasTexto}

TEXTO ORIGINAL DO FATO (escrito pelo inspetor):
"""
${fato}
"""

INSTRU√á√ïES DE FORMATO:
- Na se√ß√£o "fato_corrigido", escreva 2-3 par√°grafos formais (m√°ximo 500 palavras) descrevendo:
  a) O que aconteceu (fatos objetivos)
  b) Como isso afronta os valores da escola (respeito, disciplina, hierarquia)
  c) Preju√≠zo causado (exemplo aos colegas, ambiente escolar)

- Na se√ß√£o "artigos_aplicaveis", liste os artigos relevantes baseado nas faltas (m√°ximo 5 artigos)
- Na se√ß√£o "fundamento_gerado", explique cada artigo aplic√°vel de forma CONCISA (m√°ximo 300 palavras, sem repetir o texto do fato_corrigido)

ATEN√á√ÉO - FORMATO DA RESPOSTA:
Sua resposta deve ser EXCLUSIVAMENTE um objeto JSON v√°lido.
N√ÉO use blocos de c√≥digo markdown (nem aspas triplas, nem tags de c√≥digo).
N√ÉO adicione explica√ß√µes antes ou depois.
N√ÉO inclua markdown em NENHUM campo.
N√ÉO retorne JSON dentro de string (JSON aninhado).
Retorne SOMENTE o JSON puro e direto, come√ßando com { e terminando com }.

Estrutura EXATA da resposta:
{
  "fato_corrigido": "Texto formal em 2-3 par√°grafos...",
  "artigos_aplicaveis": ["Art. 6¬∫", "Art. 7¬∫, inciso II", "Anexo I, Item 56"],
  "fundamento_gerado": "Com base no Art. 6¬∫...",
  "sugestoes_adicionais": "Texto opcional com observa√ß√µes"
}

Exemplo CORRETO de resposta:
{"fato_corrigido":"No dia...", "artigos_aplicaveis":["Art. 6¬∫"], "fundamento_gerado":"...", "sugestoes_adicionais":"..."}
`;
}

// Parsear resposta do Gemini (tentar extrair JSON)
function parseResposta(texto) {
  try {
    // Remover TODOS os blocos markdown de forma agressiva
    let textoLimpo = texto.trim();
    textoLimpo = textoLimpo.replace(/^```(?:json)?\s*/i, '');
    textoLimpo = textoLimpo.replace(/\s*```$/m, '');
    textoLimpo = textoLimpo.trim();

    // Tentar parsear diretamente
    let json = JSON.parse(textoLimpo);

    // DETECTAR JSON ANINHADO (Gemini √†s vezes retorna JSON como string)
    if (json.fato_corrigido && typeof json.fato_corrigido === 'string') {
      const fato = json.fato_corrigido.trim();

      // Se come√ßa com { ou [ ou ", pode ser JSON aninhado
      if (fato.startsWith('{') || fato.startsWith('"') || fato.startsWith('[')) {
        try {
          console.log('üîÑ Tentando parsear JSON aninhado...');
          const jsonAninhado = JSON.parse(fato);

          // Se o parse deu certo e tem fato_corrigido, usar o JSON interno
          if (jsonAninhado && jsonAninhado.fato_corrigido) {
            console.log('‚úÖ JSON aninhado parseado com sucesso');
            json = jsonAninhado;
          }
        } catch (e) {
          // Se falhar, manter o texto original (n√£o √© JSON aninhado)
          console.log('‚ÑπÔ∏è N√£o era JSON aninhado, mantendo texto original');
        }
      }
    }

    // Validar e retornar estrutura esperada
    const resultado = {
      fato_corrigido: json.fato_corrigido || texto,
      artigos_aplicaveis: json.artigos_aplicaveis || [],
      fundamento_gerado: json.fundamento_gerado || 'N√£o foi poss√≠vel gerar automaticamente. Revise manualmente.',
      sugestoes_adicionais: json.sugestoes_adicionais || ''
    };

    // Limpar markdown residual dos campos de texto
    if (typeof resultado.fato_corrigido === 'string') {
      resultado.fato_corrigido = resultado.fato_corrigido.replace(/^```(?:json)?\s*/i, '').replace(/\s*```$/m, '').trim();
    }
    if (typeof resultado.fundamento_gerado === 'string') {
      resultado.fundamento_gerado = resultado.fundamento_gerado.replace(/^```(?:json)?\s*/i, '').replace(/\s*```$/m, '').trim();
    }

    console.log('‚úÖ Resposta parseada:', {
      tem_fato: !!resultado.fato_corrigido,
      num_artigos: resultado.artigos_aplicaveis.length
    });

    return resultado;
  } catch (e) {
    console.error('‚ùå Erro ao parsear JSON:', e.message);

    // Fallback: tentar extrair JSON com regex
    const match = texto.match(/\{[\s\S]*\}/);
    if (match) {
      try {
        const extracted = JSON.parse(match[0]);
        console.log('‚úÖ JSON extra√≠do com regex');
        return {
          fato_corrigido: extracted.fato_corrigido || texto,
          artigos_aplicaveis: extracted.artigos_aplicaveis || [],
          fundamento_gerado: extracted.fundamento_gerado || 'N√£o foi poss√≠vel gerar automaticamente.',
          sugestoes_adicionais: extracted.sugestoes_adicionais || ''
        };
      } catch (e2) {
        console.error('‚ùå Erro ao parsear JSON extra√≠do:', e2.message);
      }
    }

    // √öltimo fallback: retornar texto bruto
    console.warn('‚ö†Ô∏è Usando fallback: texto bruto');
    return {
      fato_corrigido: texto,
      artigos_aplicaveis: [],
      fundamento_gerado: 'N√£o foi poss√≠vel gerar automaticamente. Revise manualmente.',
      sugestoes_adicionais: ''
    };
  }
}
